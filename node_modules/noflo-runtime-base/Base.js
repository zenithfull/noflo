(function() {
  var BaseTransport, debugMessagingReceive, debugMessagingReceivePayload, debugMessagingSend, debugMessagingSendPayload, protocols;

  protocols = {
    Runtime: require('./protocol/Runtime'),
    Graph: require('./protocol/Graph'),
    Network: require('./protocol/Network'),
    Component: require('./protocol/Component')
  };

  debugMessagingReceive = require('debug')('noflo-runtime-base:messaging:receive');

  debugMessagingReceivePayload = require('debug')('noflo-runtime-base:messaging:receive:payload');

  debugMessagingSend = require('debug')('noflo-runtime-base:messaging:send');

  debugMessagingSendPayload = require('debug')('noflo-runtime-base:messaging:send:payload');

  BaseTransport = (function() {
    function BaseTransport(options) {
      var path;
      this.options = options;
      if (!this.options) {
        this.options = {};
      }
      this.version = '0.5';
      this.component = new protocols.Component(this);
      this.graph = new protocols.Graph(this);
      this.network = new protocols.Network(this);
      this.runtime = new protocols.Runtime(this);
      this.context = null;
      if (this.options.defaultGraph != null) {
        this.options.defaultGraph.baseDir = this.options.baseDir;
        path = 'default/main';
        this.context = 'none';
        this.graph.registerGraph(path, this.options.defaultGraph);
        this.network.startNetwork(this.options.defaultGraph, {
          graph: path
        }, this.context);
      }
      if ((this.options.captureOutput != null) && this.options.captureOutput) {
        this.startCapture();
      }
      if (!this.options.defaultPermissions) {
        this.options.defaultPermissions = [];
      }
      if (!this.options.permissions) {
        this.options.permissions = {};
      }
    }

    BaseTransport.prototype.canDo = function(capability, secret) {
      var permitted;
      permitted = this.getPermitted(secret);
      if (permitted.indexOf(capability) !== -1) {
        return true;
      }
      return false;
    };

    BaseTransport.prototype.getPermitted = function(secret) {
      if (!secret) {
        return this.options.defaultPermissions;
      }
      if (!this.options.permissions[secret]) {
        return [];
      }
      return this.options.permissions[secret];
    };

    BaseTransport.prototype.send = function(protocol, topic, payload, context) {
      debugMessagingSend(protocol + " " + topic);
      return debugMessagingSendPayload(payload);
    };

    BaseTransport.prototype.sendAll = function(protocol, topic, payload, context) {};

    BaseTransport.prototype.receive = function(protocol, topic, payload, context) {
      if (!payload) {
        payload = {};
      }
      debugMessagingReceive(protocol + " " + topic);
      debugMessagingReceivePayload(payload);
      this.context = context;
      switch (protocol) {
        case 'runtime':
          return this.runtime.receive(topic, payload, context);
        case 'graph':
          return this.graph.receive(topic, payload, context);
        case 'network':
          return this.network.receive(topic, payload, context);
        case 'component':
          return this.component.receive(topic, payload, context);
      }
    };

    return BaseTransport;

  })();

  module.exports = BaseTransport;

  module.exports.trace = require('./trace');

  module.exports.direct = require('./direct');

}).call(this);
