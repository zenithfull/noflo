(function() {
  var Base, DirectClient, DirectRuntime, EventEmitter, isBrowser,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  isBrowser = function() {
    return !(typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1);
  };

  Base = require('./Base');

  EventEmitter = require('events').EventEmitter;

  DirectRuntime = (function(superClass) {
    extend(DirectRuntime, superClass);

    function DirectRuntime(options) {
      DirectRuntime.__super__.constructor.call(this, options);
      this.clients = [];
    }

    DirectRuntime.prototype._connect = function(client) {
      this.clients.push(client);
      return client.on('send', (function(_this) {
        return function(msg) {
          return _this._receive(msg, {
            client: client
          });
        };
      })(this));
    };

    DirectRuntime.prototype._disconnect = function(client) {
      if (this.clients.indexOf(client) === -1) {
        return;
      }
      this.clients.splice(this.clients.indexOf(client), 1);
      return client.removeAllListeners('send');
    };

    DirectRuntime.prototype._receive = function(msg, context) {
      return this.receive(msg.protocol, msg.command, msg.payload, context);
    };

    DirectRuntime.prototype.send = function(protocol, topic, payload, context) {
      var m;
      if (!context.client) {
        return;
      }
      m = {
        protocol: protocol,
        command: topic,
        payload: payload
      };
      return context.client._receive(m);
    };

    DirectRuntime.prototype.sendAll = function(protocol, topic, payload) {
      var client, i, len, m, ref, results;
      m = {
        protocol: protocol,
        command: topic,
        payload: payload
      };
      ref = this.clients;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        client = ref[i];
        results.push(client._receive(m));
      }
      return results;
    };

    return DirectRuntime;

  })(Base);

  DirectClient = (function(superClass) {
    extend(DirectClient, superClass);

    function DirectClient(runtime, name) {
      this.name = name;
      DirectClient.__super__.constructor.call(this);
      this.runtime = runtime;
      if (!this.name) {
        this.name = 'Unnamed client';
      }
    }

    DirectClient.prototype.connect = function() {
      return this.runtime._connect(this);
    };

    DirectClient.prototype.disconnect = function() {
      return this.runtime._disconnect(this);
    };

    DirectClient.prototype.send = function(protocol, topic, payload) {
      var m;
      m = {
        protocol: protocol,
        command: topic,
        payload: payload
      };
      return this.emit('send', m);
    };

    DirectClient.prototype._receive = function(message) {
      return this.emit('message', message);
    };

    return DirectClient;

  })(EventEmitter);

  exports.Client = DirectClient;

  exports.Runtime = DirectRuntime;

}).call(this);
