var Tracer, baseDir, chai, direct, noflo, path;

noflo = require('noflo');

if (noflo.isBrowser()) {
  direct = require('noflo-runtime-base').direct;
  Tracer = require('noflo-runtime-base').trace.Tracer;
  baseDir = '/noflo-runtime-base';
} else {
  if (!chai) {
    chai = require('chai');
  }
  direct = require('../src/direct');
  Tracer = require('../src/trace').Tracer;
  path = require('path');
  baseDir = path.resolve(__dirname, '../');
}

describe('Tracer', function() {
  var tracer;
  tracer = null;
  describe.skip('attached to Noflo.Component', function() {
    var component, trace;
    component = null;
    trace = null;
    before(function(done) {
      var loader;
      this.timeout(20 * 1000);
      console.log('before', Tracer);
      tracer = new Tracer;
      loader = new noflo.ComponentLoader(baseDir);
      return loader.load('noflo-runtime-base/TestRepeats', function(err, instance) {
        if (err) {
          return done(err);
        }
        component = instance;
        return component.once('ready', function() {
          tracer.attach(instance.network);
          return setTimeout(done, 1);
        });
      });
    });
    after(function(done) {
      this.timeout(10 * 1000);
      return done();
    });
    it('should collect data coming through', function(done) {
      component.once('stop', function() {
        tracer.dumpString(function(err, f) {
          if (err) {
            return done(err);
          }
        });
        console.log('Wrote flowtrace to', f);
        return done();
      });
      return component.start();
    });
    it('trace should contain graph');
    it('trace should contain subgraphs');
    it('trace should have data events');
    it('trace should have groups events');
    it('trace should have data send from exported outport');
    return it('trace should have data send to exported inport');
  });
  return describe('tracing unserializable events', function() {
    return it('should drop only those events');
  });
});

describe('FBP protocol tracing', function() {
  return describe('runtime with trace=true', function() {
    return describe('triggering trace', function() {
      return it('should return trace');
    });
  });
});
